// Generated by CoffeeScript 1.7.1
(function() {
  var clear_emails, d, handle_get_settings_success, handle_patch_success, populate_emails, populate_orgs, request_get, request_patch, show_ui, update_ui_values;

  d = document;

  request_patch = function(path, value) {
    var body, client;
    client = new XMLHttpRequest();
    client.addEventListener('load', handle_patch_success);
    client.open('PATCH', '/settings');
    client.setRequestHeader('Content-Type', 'application/json-patch+json');
    body = [
      {
        'op': 'replace',
        'path': path,
        'value': value
      }
    ];
    client.send(JSON.stringify(body));
  };

  handle_patch_success = function() {};

  populate_orgs = function(orgs) {};

  clear_emails = function() {
    var child, children, dropdown, _i, _len;
    dropdown = d.getElementById('default_email');
    children = (function() {
      var _i, _len, _ref, _results;
      _ref = dropdown.children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        _results.push(child);
      }
      return _results;
    })();
    for (_i = 0, _len = children.length; _i < _len; _i++) {
      child = children[_i];
      dropdown.removeChild(child);
    }
  };

  populate_emails = function(emails) {
    var address, create_option, dropdown, _i, _len, _ref;
    dropdown = d.getElementById('default_email');
    create_option = function(value, text) {
      var option;
      option = d.createElement('option');
      option.value = value;
      option.appendChild(d.createTextNode(text));
      return option;
    };
    dropdown.appendChild(create_option('primary', "primary address (currently " + emails.primary + ")"));
    _ref = emails.additional;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      address = _ref[_i];
      dropdown.appendChild(create_option(address, address));
    }
  };

  update_ui_values = function(settings) {
    clear_emails();
    populate_emails(settings.emails);
    d.getElementById('default_email').value = settings.default_email;
    populate_orgs(settings.per_org_email);
    d.getElementById('daily_hour').value = settings.hour;
    d.getElementById('daily_timezone').value = settings.time_zone;
  };

  show_ui = function() {
    d.getElementById('loading').style.display = 'none';
    return d.getElementById('settings_main').style.display = 'inline-block';
  };

  request_get = function(url, success_callback) {
    var client;
    client = new XMLHttpRequest();
    client.addEventListener('load', success_callback);
    client.responseType = 'json';
    client.open('GET', url);
    client.setRequestHeader('Accept', 'application/json');
    client.send();
  };

  handle_get_settings_success = function() {
    var settings;
    console.log(this);
    console.log(this.response);
    settings = this.response;
    update_ui_values(settings);
    show_ui();
  };

  request_get('/settings', handle_get_settings_success);

  d.addEventListener('DOMContentLoaded', function() {
    var delete_button;
    delete_button = d.getElementById('button_delete');
    d.getElementById('checkbox_enable_delete').addEventListener('change', function() {
      return delete_button.disabled = !this.checked;
    });
    return delete_button.addEventListener('click', function() {
      return alert('Coming soon!');
    });
  });

}).call(this);
